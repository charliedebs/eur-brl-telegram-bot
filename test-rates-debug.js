// test-real-rates.js
// Test avec les VRAIS taux CoinGecko + Wise

import 'dotenv/config';
import { getRates, calculateOnChain } from './src/services/rates.js';
import { getWiseComparison } from './src/services/wise.js';

console.log('üß™ TEST AVEC VRAIS TAUX (CoinGecko + Wise)\n');
console.log('='.repeat(80));

async function testRealRates() {
  // ==========================================
  // √âTAPE 1 : R√©cup√©rer les taux CoinGecko
  // ==========================================
  console.log('\nüì° √âTAPE 1 : R√©cup√©ration taux CoinGecko\n');
  console.log('-'.repeat(80));
  
  const rates = await getRates();
  
  if (!rates) {
    console.log('‚ùå ERREUR : Impossible de r√©cup√©rer les taux CoinGecko');
    console.log('   ‚Üí V√©rifie ta connexion internet');
    console.log('   ‚Üí V√©rifie si CoinGecko API est up');
    return;
  }
  
  console.log('‚úÖ Taux CoinGecko r√©cup√©r√©s:');
  console.log(`   USDC/EUR: ${rates.usdcEUR.toFixed(4)}`);
  console.log(`   USDC/BRL: ${rates.usdcBRL.toFixed(4)}`);
  console.log(`   EUR/USDC: ${rates.eurToUsdc.toFixed(4)}`);
  console.log(`   Cross EUR/BRL: ${rates.cross.toFixed(4)}`);
  console.log(`   Timestamp: ${rates.timestamp}`);
  
  // ==========================================
  // √âTAPE 2 : Calculer on-chain EUR ‚Üí BRL
  // ==========================================
  console.log('\n\nüíé √âTAPE 2 : Calcul on-chain EUR ‚Üí BRL (1000‚Ç¨)\n');
  console.log('-'.repeat(80));
  
  const amount = 1000;
  const onchainEURBRL = calculateOnChain('eurbrl', amount, rates);
  
  console.log('R√©sultat on-chain:');
  console.log(`   Input:  ${onchainEURBRL.in} EUR`);
  console.log(`   Output: ${onchainEURBRL.out.toFixed(2)} BRL`);
  console.log(`   Taux effectif: ${onchainEURBRL.rate.toFixed(4)}`);
  
  console.log('\nBreakdown:');
  console.log(`   1. USDC apr√®s achat EU:  ${onchainEURBRL.breakdown.usdcAfterBuy.toFixed(2)} USDC`);
  console.log(`   2. USDC apr√®s r√©seau:    ${onchainEURBRL.breakdown.usdcAfterNetwork.toFixed(2)} USDC`);
  console.log(`   3. BRL apr√®s trade BR:   ${onchainEURBRL.breakdown.brlAfterTrade.toFixed(2)} BRL`);
  console.log(`   4. BRL net (apr√®s Pix):  ${onchainEURBRL.breakdown.brlNet.toFixed(2)} BRL`);
  
  // ==========================================
  // √âTAPE 3 : R√©cup√©rer taux Wise
  // ==========================================
  console.log('\n\nüè¶ √âTAPE 3 : R√©cup√©ration taux Wise (off-chain)\n');
  console.log('-'.repeat(80));
  
  const wiseData = await getWiseComparison('eurbrl', amount);
  
  if (!wiseData || !wiseData.providers || wiseData.providers.length === 0) {
    console.log('‚ö†Ô∏è ATTENTION : Aucun provider off-chain trouv√©');
    console.log('   ‚Üí Wise API peut √™tre down ou rate-limited');
    return;
  }
  
  console.log(`‚úÖ ${wiseData.providers.length} providers trouv√©s:\n`);
  
  const bestBank = wiseData.providers[0];
  const others = wiseData.providers.slice(1, 6); // Top 6
  
  // Afficher tous les providers
  wiseData.providers.forEach((p, i) => {
    const isPriority = p.priority ? ' ‚≠ê' : '';
    console.log(`   ${i + 1}. ${p.provider}${isPriority}`);
    console.log(`      Output: ${p.out.toFixed(2)} BRL`);
    console.log(`      Rate: ${p.rate.toFixed(4)}`);
    console.log(`      Fee: ${p.fee !== null ? p.fee.toFixed(2) + ' EUR' : 'N/A'}`);
  });
  
  // ==========================================
  // √âTAPE 4 : COMPARAISON On-chain vs Best Off-chain
  // ==========================================
  console.log('\n\nüìä √âTAPE 4 : COMPARAISON On-chain vs Off-chain\n');
  console.log('='.repeat(80));
  
  console.log(`Input: ${amount} EUR\n`);
  
  console.log('üåç On-chain:');
  console.log(`   Output:        ${onchainEURBRL.out.toFixed(2)} BRL`);
  console.log(`   Taux effectif: ${onchainEURBRL.rate.toFixed(4)}`);
  
  console.log(`\nüè¶ Best off-chain (${bestBank.provider}):`);
  console.log(`   Output:        ${bestBank.out.toFixed(2)} BRL`);
  console.log(`   Taux effectif: ${bestBank.rate.toFixed(4)}`);
  console.log(`   Fee:           ${bestBank.fee !== null ? bestBank.fee.toFixed(2) + ' EUR' : 'N/A'}`);
  
  const delta = ((onchainEURBRL.out - bestBank.out) / bestBank.out) * 100;
  const winner = delta >= 0 ? 'on-chain' : bestBank.provider;
  
  console.log(`\nüí∞ Diff√©rence:`);
  console.log(`   ${delta >= 0 ? '+' : ''}${delta.toFixed(2)}% en faveur de ${winner}`);
  console.log(`   Soit ${(onchainEURBRL.out - bestBank.out).toFixed(2)} BRL de diff√©rence`);
  
  if (delta >= 3) {
    console.log('\n‚úÖ On-chain CLAIREMENT meilleur (+3% ou plus)');
  } else if (delta >= 0) {
    console.log('\n‚úÖ On-chain l√©g√®rement meilleur');
  } else if (delta >= -3) {
    console.log('\n‚ö†Ô∏è Off-chain l√©g√®rement meilleur');
  } else {
    console.log('\n‚ùå Off-chain CLAIREMENT meilleur (-3% ou plus)');
    console.log('   üî¥ PROBL√àME : On-chain devrait √™tre meilleur !');
  }
  
  // ==========================================
  // √âTAPE 5 : V√©rifier coh√©rence des taux affich√©s
  // ==========================================
  console.log('\n\nüîç √âTAPE 5 : V√©rification coh√©rence taux\n');
  console.log('='.repeat(80));
  
  console.log('Taux cross CoinGecko:');
  console.log(`   ${rates.cross.toFixed(4)} (r√©f√©rence march√©s)`);
  
  console.log('\nTaux effectif on-chain:');
  console.log(`   ${onchainEURBRL.rate.toFixed(4)} (apr√®s tous frais)`);
  
  console.log('\nTaux effectif best off-chain:');
  console.log(`   ${bestBank.rate.toFixed(4)} (${bestBank.provider})`);
  
  const diffOnchainVsCross = ((onchainEURBRL.rate - rates.cross) / rates.cross) * 100;
  console.log(`\nüìâ Perte on-chain vs cross:`);
  console.log(`   ${diffOnchainVsCross.toFixed(2)}% (normal, d√ª aux frais)`);
  
  if (diffOnchainVsCross < -5) {
    console.log('   ‚úÖ Normal (frais ~0.5-1%)');
  } else if (diffOnchainVsCross < -10) {
    console.log('   ‚ö†Ô∏è Perte importante (>10%) - v√©rifie les frais');
  } else {
    console.log('   üî¥ ANORMAL - probl√®me dans les calculs');
  }
  
  // ==========================================
  // √âTAPE 6 : Simuler l'affichage dans le bot
  // ==========================================
  console.log('\n\nüí¨ √âTAPE 6 : Simulation message bot\n');
  console.log('='.repeat(80));
  
  console.log('Ce que l\'utilisateur devrait voir:\n');
  
  console.log('üí± EUR ‚Üí BRL\n');
  console.log(`üìä R√©f. ${rates.cross.toFixed(4)} ‚Ä¢ ${new Date().toLocaleTimeString('fr-FR', {hour: '2-digit', minute: '2-digit'})}\n`);
  
  console.log('üåç On-chain');
  console.log(`‚Ç¨${amount.toLocaleString('fr-FR')} ‚Üí R$${onchainEURBRL.out.toLocaleString('fr-FR', {minimumFractionDigits: 2})} (${onchainEURBRL.rate.toFixed(4)})\n`);
  
  console.log(`üè¶ ${bestBank.provider}`);
  console.log(`‚Ç¨${amount.toLocaleString('fr-FR')} ‚Üí R$${bestBank.out.toLocaleString('fr-FR', {minimumFractionDigits: 2})} (${bestBank.rate.toFixed(4)})\n`);
  
  if (others.length > 0) {
    const othersList = others.map(p => 
      `${p.provider} R$${p.out.toLocaleString('fr-FR', {minimumFractionDigits: 0})}`
    ).join(' ‚Ä¢ ');
    console.log(`Autres: ${othersList}\n`);
  }
  
  console.log(`‚úÖ ${delta >= 0 ? '+' : '‚àí'}${Math.abs(delta).toFixed(1)}% on-chain`);
  
  // ==========================================
  // DIAGNOSTIC FINAL
  // ==========================================
  console.log('\n\nüéØ DIAGNOSTIC FINAL\n');
  console.log('='.repeat(80));
  
  const issues = [];
  
  // Check 1: Taux CoinGecko OK
  if (rates.cross < 5 || rates.cross > 8) {
    issues.push('üî¥ Taux CoinGecko suspect (hors range 5-8)');
  } else {
    console.log('‚úÖ Taux CoinGecko coh√©rents');
  }
  
  // Check 2: Calcul on-chain OK
  const expectedLoss = 0.5; // ~0.5% de perte attendue
  if (Math.abs(diffOnchainVsCross + expectedLoss) > 0.3) {
    issues.push('üî¥ Perte on-chain anormale (devrait √™tre ~0.5%)');
  } else {
    console.log('‚úÖ Calculs on-chain corrects');
  }
  
  // Check 3: On-chain meilleur que off-chain
  if (delta < 0) {
    issues.push(`üî¥ On-chain MOINS bon que off-chain (${delta.toFixed(2)}%)`);
  } else if (delta < 2) {
    console.log(`‚ö†Ô∏è On-chain √† peine meilleur (+${delta.toFixed(2)}%) - peut √™tre normal`);
  } else {
    console.log(`‚úÖ On-chain meilleur (+${delta.toFixed(2)}%)`);
  }
  
  // Check 4: Wise API fonctionne
  if (wiseData.providers.length < 3) {
    issues.push('‚ö†Ô∏è Peu de providers Wise (API peut √™tre limit√©e)');
  } else {
    console.log(`‚úÖ Wise API OK (${wiseData.providers.length} providers)`);
  }
  
  if (issues.length > 0) {
    console.log('\n\n‚ö†Ô∏è PROBL√àMES D√âTECT√âS:\n');
    issues.forEach(issue => console.log(`   ${issue}`));
  } else {
    console.log('\n\nüéâ TOUT EST OK ! Aucun probl√®me d√©tect√©.');
  }
  
  console.log('\n' + '='.repeat(80));
}

// Ex√©cution
testRealRates().catch(error => {
  console.error('\nüí• ERREUR CRITIQUE:\n');
  console.error(error);
  console.log('\nüí° V√©rifie:');
  console.log('   ‚Ä¢ Connexion internet');
  console.log('   ‚Ä¢ Variables d\'environnement (.env)');
  console.log('   ‚Ä¢ APIs CoinGecko et Wise sont up');
  process.exit(1);
});