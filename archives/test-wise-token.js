// test-wise-token.js
// Place ce fichier √† la racine du projet et lance : node test-wise-token.js

import 'dotenv/config';

const WISE_API_TOKEN = process.env.WISE_API_TOKEN;

console.log('üîç Test du token Wise API\n');

if (!WISE_API_TOKEN) {
  console.error('‚ùå WISE_API_TOKEN non trouv√© dans .env');
  process.exit(1);
}

console.log(`‚úÖ Token trouv√© : ${WISE_API_TOKEN.substring(0, 10)}...`);
console.log('\nüì° Test 1 : Appel API Wise Comparisons...\n');

async function testWiseComparison() {
  try {
    const body = {
      sourceCurrency: 'EUR',
      targetCurrency: 'BRL',
      sourceAmount: 1000
    };

    console.log('üì§ Requ√™te :');
    console.log(JSON.stringify(body, null, 2));
    console.log('');

    const response = await fetch('https://api.wise.com/v4/comparisons', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${WISE_API_TOKEN}`,
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      },
      body: JSON.stringify(body)
    });

    console.log(`üì• Statut HTTP : ${response.status} ${response.statusText}`);
    console.log('');

    const responseText = await response.text();
    
    if (!response.ok) {
      console.error('‚ùå Erreur API Wise :');
      console.error('Headers de r√©ponse :', Object.fromEntries(response.headers.entries()));
      console.error('\nCorps de la r√©ponse :');
      console.error(responseText);
      
      if (response.status === 401) {
        console.error('\nüí° Erreur 401 = Token invalide ou expir√©');
        console.error('   ‚Üí V√©rifie ton token sur https://wise.com/settings/api-tokens');
      } else if (response.status === 403) {
        console.error('\nüí° Erreur 403 = Token valide mais permissions insuffisantes');
        console.error('   ‚Üí Ton token doit avoir acc√®s √† "Comparisons API"');
      } else if (response.status === 404) {
        console.error('\nüí° Erreur 404 = Endpoint introuvable');
        console.error('   ‚Üí L\'API Wise a peut-√™tre chang√©');
        console.error('   ‚Üí Ou ton compte n\'a pas acc√®s √† cette API');
      }
      
      return false;
    }

    const data = JSON.parse(responseText);
    console.log('‚úÖ R√©ponse r√©ussie !');
    console.log('');
    console.log('üìä Donn√©es re√ßues :');
    console.log(JSON.stringify(data, null, 2));
    
    if (data.providers && data.providers.length > 0) {
      console.log('');
      console.log('‚úÖ Providers trouv√©s :');
      data.providers.forEach(p => {
        console.log(`  ‚Ä¢ ${p.name}: ${p.targetAmount} BRL (taux: ${p.rate})`);
      });
    }

    return true;
  } catch (error) {
    console.error('‚ùå Erreur lors du test :');
    console.error(error);
    return false;
  }
}

// Test 2 : V√©rifier le profil Wise
async function testWiseProfile() {
  console.log('\nüì° Test 2 : V√©rification du profil Wise...\n');
  
  try {
    const response = await fetch('https://api.wise.com/v1/profiles', {
      headers: {
        'Authorization': `Bearer ${WISE_API_TOKEN}`
      }
    });

    console.log(`üì• Statut HTTP : ${response.status} ${response.statusText}`);
    
    if (response.ok) {
      const profiles = await response.json();
      console.log('‚úÖ Profils trouv√©s :');
      console.log(JSON.stringify(profiles, null, 2));
    } else {
      const errorText = await response.text();
      console.error('‚ùå Erreur profil :', errorText);
    }
  } catch (error) {
    console.error('‚ùå Erreur :', error.message);
  }
}

// Ex√©cution
(async () => {
  const success = await testWiseComparison();
  await testWiseProfile();
  
  console.log('\n' + '='.repeat(60));
  if (success) {
    console.log('‚úÖ TOKEN WISE FONCTIONNE CORRECTEMENT !');
  } else {
    console.log('‚ùå PROBL√àME AVEC LE TOKEN WISE');
    console.log('\nüìù Actions √† faire :');
    console.log('1. Aller sur https://wise.com/settings/api-tokens');
    console.log('2. V√©rifier que ton token existe et n\'est pas expir√©');
    console.log('3. V√©rifier qu\'il a les permissions "Read" au minimum');
    console.log('4. Si besoin, cr√©er un nouveau token');
  }
  console.log('='.repeat(60));
})();